{
	"name": "optima-ai",
	"displayName": "Optima AI",
	"description": "A VS Code plugin that enhances coding with AI-powered automation, multi-model support, and experimental features.",
	"publisher": "HansTech",
	"version": "3.3.17",
	"icon": "assets/icons/rocket.png",
	"galleryBanner": {
		"color": "#617A91",
		"theme": "dark"
	},
	"engines": {
		"vscode": "^1.84.0"
	},
	"author": {
		"name": "Hans Ade"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/Hansade2005/optima-ai"
	},
	"homepage": "https://github.com/Hansade2005/optima-ai",
	"categories": [
		"AI",
		"Chat",
		"Programming Languages",
		"Education",
		"Snippets",
		"Testing"
	],
	"keywords": [
		"cline",
		"claude",
		"dev",
		"mcp",
		"openrouter",
		"coding",
		"agent",
		"autonomous",
		"chatgpt",
		"sonnet",
		"ai",
		"llama",
		"optima AI",
		"OptimaAI"
	],
	"activationEvents": [
		"onLanguage",
		"onStartupFinished"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "optima-ai-ActivityBar",
					"title": "Optima AI",
					"icon": "$(rocket)"
				}
			]
		},
		"views": {
			"optima-ai-ActivityBar": [
				{
					"type": "webview",
					"id": "optima-ai.SidebarProvider",
					"name": ""
				}
			]
		},
		"commands": [
			{
				"command": "optima-ai.plusButtonClicked",
				"title": "New Task",
				"icon": "$(add)"
			},
			{
				"command": "optima-ai.reloadWebview",
				"title": "Optima AI: Reload UI",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.mcpButtonClicked",
				"title": "MCP Servers",
				"icon": "$(server)"
			},
			{
				"command": "optima-ai.promptsButtonClicked",
				"title": "Prompts",
				"icon": "$(notebook)"
			},
			{
				"command": "optima-ai.historyButtonClicked",
				"title": "History",
				"icon": "$(history)"
			},
			{
				"command": "optima-ai.popoutButtonClicked",
				"title": "Open in Editor",
				"icon": "$(link-external)"
			},
			{
				"command": "optima-ai.settingsButtonClicked",
				"title": "Settings",
				"icon": "$(settings-gear)"
			},
			{
				"command": "optima-ai.openInNewTab",
				"title": "Open In New Tab",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.explainCode",
				"title": "Optima AI: Explain Code",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.fixCode",
				"title": "Optima AI: Fix Code",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.improveCode",
				"title": "Optima AI: Improve Code",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.addToContext",
				"title": "Optima AI: Add To Context",
				"category": "Optima AI"
			},
			{
				"command": "optima-ai.terminalAddToContext",
				"title": "Optima AI: Add Terminal Content to Context",
				"category": "Terminal"
			},
			{
				"command": "optima-ai.terminalFixCommand",
				"title": "Optima AI: Fix This Command",
				"category": "Terminal"
			},
			{
				"command": "optima-ai.terminalExplainCommand",
				"title": "Optima AI: Explain This Command",
				"category": "Terminal"
			},
			{
				"command": "optima-ai.terminalFixCommandInCurrentTask",
				"title": "Optima AI: Fix This Command (Current Task)",
				"category": "Terminal"
			},
			{
				"command": "optima-ai.terminalExplainCommandInCurrentTask",
				"title": "Optima AI: Explain This Command (Current Task)",
				"category": "Terminal"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "optima-ai.explainCode",
					"when": "editorHasSelection",
					"group": "Optima AI@1"
				},
				{
					"command": "optima-ai.fixCode",
					"when": "editorHasSelection",
					"group": "Optima AI@2"
				},
				{
					"command": "optima-ai.improveCode",
					"when": "editorHasSelection",
					"group": "Optima AI@3"
				},
				{
					"command": "optima-ai.addToContext",
					"when": "editorHasSelection",
					"group": "Optima AI@4"
				}
			],
			"terminal/context": [
				{
					"command": "optima-ai.terminalAddToContext",
					"group": "Optima AI@1"
				},
				{
					"command": "optima-ai.terminalFixCommand",
					"group": "Optima AI@2"
				},
				{
					"command": "optima-ai.terminalExplainCommand",
					"group": "Optima AI@3"
				},
				{
					"command": "optima-ai.terminalFixCommandInCurrentTask",
					"group": "Optima AI@5"
				},
				{
					"command": "optima-ai.terminalExplainCommandInCurrentTask",
					"group": "Optima AI@6"
				}
			],
			"view/title": [
				{
					"command": "optima-ai.plusButtonClicked",
					"group": "navigation@1",
					"when": "view == optima-ai.SidebarProvider"
				},
				{
					"command": "optima-ai.promptsButtonClicked",
					"group": "navigation@2",
					"when": "view == optima-ai.SidebarProvider"
				},
				{
					"command": "optima-ai.mcpButtonClicked",
					"group": "navigation@3",
					"when": "view == optima-ai.SidebarProvider"
				},
				{
					"command": "optima-ai.historyButtonClicked",
					"group": "navigation@4",
					"when": "view == optima-ai.SidebarProvider"
				},
				{
					"command": "optima-ai.popoutButtonClicked",
					"group": "navigation@5",
					"when": "view == optima-ai.SidebarProvider"
				},
				{
					"command": "optima-ai.settingsButtonClicked",
					"group": "navigation@6",
					"when": "view == optima-ai.SidebarProvider"
				}
			]
		},
		"configuration": {
			"title": "Optima AI",
			"properties": {
				"optima-ai.allowedCommands": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": [
						"npm test",
						"npm install",
						"tsc",
						"git log",
						"git diff",
						"git show"
					],
					"description": "Commands that can be auto-executed when 'Always approve execute operations' is enabled"
				},
				"optima-ai.vsCodeLmModelSelector": {
					"type": "object",
					"properties": {
						"vendor": {
							"type": "string",
							"description": "The vendor of the language model (e.g. copilot)"
						},
						"family": {
							"type": "string",
							"description": "The family of the language model (e.g. gpt-4)"
						}
					},
					"description": "Settings for VSCode Language Model API"
				}
			}
		}
	},
	"scripts": {
		"build": "pnpm run build:webview && pnpm run build:extension",
		"build:webview": "cd webview-ui && pnpm install && pnpm run build",
		"build:extension": "mkdir -p dist && tsc -p . && node esbuild.js",
		"build:production": "mkdir -p dist && tsc -p . --skipLibCheck || true && node esbuild.js --production",
		"package": "pnpm run build && pnpm dlx vsce package --no-dependencies",
		"vsix": "mkdir -p bin && mkdir -p webview-ui/build/assets && pnpm run build:webview && pnpm run build:production && pnpm dlx vsce package --no-dependencies -o bin/$npm_package_name-$npm_package_version.vsix",
		"publish:marketplace": "vsce publish --no-dependencies",
		"lint": "eslint src --ext ts",
		"lint-fix": "eslint src --ext ts --fix",
		"test": "jest",
		"watch": "tsc -p . --watch",
		"dev": "cd webview-ui && pnpm run dev",
		"verify-assets": "node -e \"const fs=require('fs'); const path=require('path'); const assetsDir=path.join(__dirname,'webview-ui','build','assets'); if(!fs.existsSync(assetsDir)){console.error('Webview assets not found! Run build:webview first.'); process.exit(1);} else{console.log('Webview assets exist:',fs.readdirSync(assetsDir));}\""
	},
	"dependencies": {
		"@anthropic-ai/bedrock-sdk": "^0.10.2",
		"@anthropic-ai/sdk": "^0.36.3",
		"@anthropic-ai/vertex-sdk": "^0.4.1",
		"@aws-sdk/client-bedrock-runtime": "^3.706.0",
		"@aws-sdk/credential-providers": "^3.706.0",
		"@google/generative-ai": "^0.18.0",
		"@mistralai/mistralai": "^1.3.6",
		"@modelcontextprotocol/sdk": "^1.0.1",
		"@types/clone-deep": "^4.0.4",
		"@types/fs-extra": "^11.0.4",
		"@types/pdf-parse": "^1.1.4",
		"@types/tmp": "^0.2.6",
		"@types/turndown": "^5.0.5",
		"@types/vscode": "^1.95.0",
		"@vscode/codicons": "^0.0.36",
		"axios": "^1.7.4",
		"cheerio": "^1.0.0",
		"chokidar": "^4.0.1",
		"clone-deep": "^4.0.1",
		"default-shell": "^2.2.0",
		"delay": "^6.0.0",
		"diff": "^5.2.0",
		"diff-match-patch": "^1.0.5",
		"fast-deep-equal": "^3.1.3",
		"fastest-levenshtein": "^1.0.16",
		"fs-extra": "^11.3.0",
		"globby": "^14.0.2",
		"isbinaryfile": "^5.0.2",
		"mammoth": "^1.8.0",
		"monaco-vscode-textmate-theme-converter": "^0.1.7",
		"openai": "^4.78.1",
		"os-name": "^6.0.0",
		"p-wait-for": "^5.0.2",
		"pdf-parse": "^1.1.1",
		"puppeteer-chromium-resolver": "^23.0.0",
		"puppeteer-core": "^23.4.0",
		"serialize-error": "^11.0.3",
		"simple-git": "^3.27.0",
		"sound-play": "^1.1.0",
		"string-similarity": "^4.0.4",
		"strip-ansi": "^7.1.0",
		"tmp": "^0.2.3",
		"tree-sitter-wasms": "^0.1.11",
		"turndown": "^7.2.0",
		"web-tree-sitter": "^0.22.6",
		"zod": "^3.23.8"
	},
	"devDependencies": {
		"@changesets/cli": "^2.27.10",
		"@changesets/types": "^6.0.0",
		"@dotenvx/dotenvx": "^1.34.0",
		"@jest/globals": "^29.7.0",
		"@types/debug": "^4.1.12",
		"@types/diff": "^5.2.1",
		"@types/diff-match-patch": "^1.0.36",
		"@types/glob": "^8.1.0",
		"@types/jest": "^29.5.14",
		"@types/mocha": "^10.0.10",
		"@types/node": "20.x",
		"@types/react-syntax-highlighter": "^15.5.13",
		"@types/string-similarity": "^4.0.2",
		"@typescript-eslint/eslint-plugin": "^7.14.1",
		"@typescript-eslint/parser": "^7.11.0",
		"@vscode/test-cli": "^0.0.9",
		"@vscode/test-electron": "^2.4.0",
		"esbuild": "^0.24.0",
		"eslint": "^8.57.0",
		"glob": "^11.0.1",
		"husky": "^9.1.7",
		"jest": "^29.7.0",
		"jest-simple-dot-reporter": "^1.0.5",
		"lint-staged": "^15.2.11",
		"mkdirp": "^3.0.1",
		"mocha": "^11.1.0",
		"npm-run-all": "^4.1.5",
		"prettier": "^3.4.2",
		"rimraf": "^6.0.1",
		"ts-jest": "^29.2.5",
		"typescript": "^5.4.5"
	},
	"lint-staged": {
		"*.{js,jsx,ts,tsx,json,css,md}": [
			"prettier --write"
		],
		"src/**/*.{ts,tsx}": [
			"npx eslint -c .eslintrc.json --max-warnings=0 --fix"
		],
		"webview-ui/**/*.{ts,tsx}": [
			"npx eslint -c webview-ui/.eslintrc.json --max-warnings=0 --fix"
		]
	}
}
